// Generated by LiveScript 1.3.1
(function(){
  var url, logger, utils, statusMap, Context, toString$ = {}.toString, slice$ = [].slice;
  url = require('url');
  logger = require('./logger');
  utils = require('./utils');
  statusMap = {
    404: 'Not found.',
    405: 'Method not allowed.',
    502: 'Server Error.'
  };
  Context = (function(){
    Context.displayName = 'Context';
    var prototype = Context.prototype, constructor = Context;
    function Context(req, resp){
      var urlObj;
      this.req = req;
      this.resp = resp;
      urlObj = url.parse(req.url);
      this.url = req.url;
      this.search = urlObj.search;
      this.query = urlObj.query;
      this.pathname = urlObj.pathname;
      this.queryParams = utils.queryStrToObj(urlObj.query);
      this.headers = req.headers;
      this.cookies = utils.parseCookie(req.headers.cookie);
      this.params = {};
      this.form = {};
      this._respHeaders = {};
      this._respCharset = 'UTF-8';
    }
    prototype.setCharset = function(_respCharset){
      this._respCharset = _respCharset;
    };
    prototype.setHeader = function(key, value){
      var obj;
      obj = {};
      if (toString$.call(key).slice(8, -1) !== 'Object') {
        obj[key] = value;
      } else {
        obj = key;
      }
      import$(this._respHeaders, obj);
    };
    prototype.send = function(){
      var args, statusCode, content, ref$;
      args = slice$.call(arguments);
      statusCode = args[0], content = args[1];
      if (!content) {
        ref$ = [200, statusCode], statusCode = ref$[0], content = ref$[1];
      }
      this.resp.writeHead(statusCode, this._respHeaders);
      this.resp.end(content);
    };
    prototype.json = function(obj){
      var str, message, error;
      this.setHeader('Content-Type', 'application/json; charset=' + this._respCharset);
      try {
        str = JSON.stringify(obj);
      } catch (e$) {
        message = e$.message;
        error = 'response.json require a Object param can be stringified to string';
        logger.error(error);
        return;
      }
      this.send(str);
    };
    prototype.html = function(str){
      this.setHeader('Content-Type', 'text/html; charset=' + this._respCharset);
      this.send(str);
    };
    prototype.sendStatus = function(statusCode){
      var that;
      if (that = statusMap[statusCode]) {
        this.send(statusCode, that);
      }
    };
    return Context;
  }());
  exports.Context = Context;
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
