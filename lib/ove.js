// Generated by LiveScript 1.3.1
(function(){
  var http, router, context, nodeStatic, Ove, toString$ = {}.toString, slice$ = [].slice;
  http = require('http');
  router = require('./router');
  context = require('./context');
  nodeStatic = require('node-static');
  Ove = (function(){
    Ove.displayName = 'Ove';
    var prototype = Ove.prototype, constructor = Ove;
    function Ove(){
      var i$, ref$, len$, name;
      this.config = {};
      this.middlewares = [];
      this.server = http.createServer();
      this.router = new router.Router;
      for (i$ = 0, len$ = (ref$ = ['register', 'get', 'post', 'put', 'delete', 'patch']).length; i$ < len$; ++i$) {
        name = ref$[i$];
        this[name] = this.router[name];
      }
    }
    prototype.config = function(config){
      this.config = config;
    };
    prototype.use = function(func){
      var idx, self;
      if (toString$.call(func).slice(8, -1) !== 'Function') {
        throw new Error('ove.use() expect a Function argument');
      }
      idx = this.middlewares.length + 1;
      self = this;
      return this.middlewares.push(function(last){
        var ctx;
        ctx = this;
        func.call(ctx, function(){
          var that;
          if (that = self.middlewares[idx]) {
            return that.call(ctx, last);
          } else {
            return last.call(ctx);
          }
        });
      });
    };
    prototype['static'] = function(pattern, path, opt){
      var self;
      this.staticServer = new nodeStatic.Server(path, opt);
      pattern = pattern.charAt(pattern.length - 1) === '/'
        ? pattern
        : pattern + '/';
      this.staticRe = new RegExp('^' + pattern.replace(/\//g, '\\/'));
      self = this;
      return this.use(function(next){
        var ref$;
        if (!this.req.url.match(self.staticRe)) {
          next();
        }
        (ref$ = this.req).url = ref$.url.replace(self.staticRe, '');
        self.staticServer.serve(this.req, this.resp);
      });
    };
    prototype.listen = function(){
      var args, port, host, self;
      args = slice$.call(arguments);
      port = args[0], host = args[1];
      if (!port) {
        port = 8888;
      }
      if (!host) {
        host = '127.0.0.1';
      }
      self = this;
      this.server.on('request', function(req, resp){
        var ctx, that;
        ctx = new context.Context(req, resp);
        self.config.charset && ctx.setCharset(self.config.charset);
        if (that = self.middlewares[0]) {
          return that.call(ctx, function(){
            return self.router.route(ctx);
          });
        } else {
          return self.router.route(ctx);
        }
      });
      return this.server.listen(port, host, function(){
        return console.log("Ove app started.\nListening: %s:%d", host, port);
      });
    };
    return Ove;
  }());
  module.exports = Ove;
}).call(this);
