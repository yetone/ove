// Generated by LiveScript 1.3.1
(function(){
  var crypto, toString$ = {}.toString;
  crypto = require('crypto');
  module.exports = {
    queryStrToObj: function(str){
      var res, pairLst, i$, len$, pair, kvLst, k, v;
      res = {};
      if (toString$.call(str).slice(8, -1) !== 'String') {
        return res;
      }
      pairLst = str.split('&');
      for (i$ = 0, len$ = pairLst.length; i$ < len$; ++i$) {
        pair = pairLst[i$];
        kvLst = pair.split('=');
        if (kvLst.length !== 2) {
          continue;
        }
        k = kvLst[0], v = kvLst[1];
        res[k.trim()] = decodeURIComponent(v);
      }
      return res;
    },
    objToQueryStr: function(obj){
      var acc, key, item;
      acc = [];
      for (key in obj) {
        item = obj[key];
        if (!obj.hasOwnProperty(key)) {
          continue;
        }
        acc.push(key + '=' + item);
      }
      return acc.join('&');
    },
    parseCookie: function(str){
      var res, pairLst, i$, len$, pair, kvLst, k, v;
      res = {};
      if (toString$.call(str).slice(8, -1) !== 'String') {
        return res;
      }
      pairLst = str.split(';');
      for (i$ = 0, len$ = pairLst.length; i$ < len$; ++i$) {
        pair = pairLst[i$];
        kvLst = pair.split('=');
        if (kvLst.length !== 2) {
          continue;
        }
        k = kvLst[0], v = kvLst[1];
        res[k.trim()] = v;
      }
      return res;
    },
    hexHmacSha1: function(data, key){
      var hmac;
      key == null && (key = '*');
      hmac = crypto.createHmac('sha1', key);
      hmac.update(data);
      return hmac.digest('hex');
    },
    base64: {
      encode: function(str){
        return new Buffer(str).toString('base64');
      },
      decode: function(str){
        return new Buffer(str, 'base64').toString('utf8');
      }
    }
  };
}).call(this);
